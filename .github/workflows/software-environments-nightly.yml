name: Create nightly Coiled software environments

on:
  workflow_dispatch:
  schedule:
    # Runs at 01:00 every day after pre-release
    - cron: "0 1 * * *"

jobs:
  build:
    name: Python ${{ matrix.python-version }}, nightly build, ${{ matrix.server }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        server: ["https://staging.coiledhq.com"]
        include: #leaving this logic as we build nightly soft env for prod. 
          - server: "https://staging.coiledhq.com"
            token-name: COILED_STAGING_BENCHMARK_BOT_TOKEN 

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v1

      - name: Install Coiled
        run: python -m pip install coiled

      - name: Create environment variables
        run: |
          # conda search for the coiled-runtime latest nightly
          arr_nightly=($(conda search --override-channels -c coiled/label/dev coiled-runtime | tail -n 1))
          
          # extract coiled-runtime nightly version / build
          export RUNTIME_NIGHTLY_VERSION=${arr_nightly[1]}
          export RUNTIME_NIGHTLY_VERSION_FORMATTED=$(echo $RUNTIME_NIGHTLY_VERSION | sed 's/\./-/g' )
          echo "Latest coiled-runtime nightly version formatted $RUNTIME_NIGHTLY_VERSION_FORMATTED"

          # Coiled software environment names can't contain "." or uppercase characters
          export PYTHON_VERSION_FORMATTED=$(echo "${{ matrix.python-version }}" | sed 's/\.//g' )
          export COILED_SOFTWARE_ENV_NAME=coiled-runtime-$RUNTIME_NIGHTLY_VERSION_FORMATTED-py$PYTHON_VERSION_FORMATTED
          export ENV_FILENAME=coiled-runtime-nightly-py$PYTHON_VERSION_FORMATTED

          # Put variables into $GITHUB_ENV so it can be used in subsequent workflow steps
          echo COILED_SOFTWARE_ENV_NAME=$COILED_SOFTWARE_ENV_NAME >> $GITHUB_ENV
          echo ENV_FILENAME=$ENV_FILENAME >> $GITHUB_ENV
          echo RUNTIME_NIGHTLY_VERSION=$RUNTIME_NIGHTLY_VERSION >> $GITHUB_ENV 
      
      - name: Pin latest nightly coiled-runtime
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          include: "environments/coiled-runtime-nightly-*.yml"
          find: "coiled-runtime"
          replace: "coiled-runtime=${{ env.RUNTIME_NIGHTLY_VERSION }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push runtime nightly ${{ env.RUNTIME_NIGHTLY_VERSION }} python ${{ matrix.python-version }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: coiled/coiled-runtime:nightly-${{ env.RUNTIME_NIGHTLY_VERSION }}-py${{ matrix.python-version }}
          build-args: ENV_FILENAME=${{ env.ENV_FILENAME }}
          platforms: linux/amd64,linux/arm64

      - name: Create Runtime ${{ env.RUNTIME_NIGHTLY_VERSION}}, Python ${{ matrix.python-version }}, Server ${{ matrix.server }} software environment
        env:
          DASK_COILED__SERVER: ${{ matrix.server }}
          DASK_COILED__TOKEN: ${{ secrets[matrix.token-name] }}
        run: |
          coiled env create --name coiled/${{ env.COILED_SOFTWARE_ENV_NAME }} --container coiled/coiled-runtime:nightly-${{ env.RUNTIME_NIGHTLY_VERSION }}-py${{ matrix.python-version }}
