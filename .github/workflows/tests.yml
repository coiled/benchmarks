name: Tests
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

  schedule:
    # Runs "at every 15th minute UTC on Mondays" (see https://crontab.guru)
    - cron: '*/15 * * * 1'

# When this workflow is queued, automatically cancel any previous running
# or pending jobs from the same branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

defaults:
  # Required shell entrypoint to have properly activated conda environments
  run:
    shell: bash -l {0}

jobs:
  software:
    name: Setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    outputs:
      coiled_software: ${{ steps.build_coiled_software.outputs.coiled_software }}
      test_upstream: ${{ steps.check_upstream.outputs.test_upstream }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python-version }}
          environment-file: ci/environment.yml

      - name: Check upstream
        id: check_upstream
        if: github.event_name == 'pull_request' || github.event_name == 'schedule'
        run: |
          COMMIT="$(git log -n 1 --pretty=format:%s HEAD^2)"
          if [[ "$COMMIT" == *"test-upstream"* || ${{ github.event_name }} == "schedule" ]]
          then
            export TEST_UPSTREAM="true"
          else
            export TEST_UPSTREAM="false"
          fi
          echo $TEST_UPSTREAM

          # Put TEST_UPSTREAM into $GITHUB_ENV so it can be used in subsequent workflow steps
          echo TEST_UPSTREAM=$TEST_UPSTREAM >> $GITHUB_ENV

          # Put TEST_UPSTREAM into an output variable so it can be used in subsequent workflow jobs
          echo "::set-output name=test_upstream::$TEST_UPSTREAM"

      - name: Build Coiled Software Environment
        id: build_coiled_software
        env:
          DASK_COILED__TOKEN: ${{ secrets.COILED_BENCHMARK_BOT_TOKEN }}
        run: |
          export PYTHON_VERSION_FORMATTED=$(echo "${{ matrix.python-version }}" | sed 's/\.//g' )
          export REF_NAME_FORMATTED=$(echo "$GITHUB_REF_NAME" | sed 's/\./-/g' )
          export COILED_SOFTWARE_NAME_HEAD=dask-engineering/coiled-runtime-${{ github.event_name }}
          export COILED_SOFTWARE_NAME_TAIL=$GITHUB_RUN_ID

          if [[ ${{ github.event_name }} = 'pull_request' ]]
          then
            export COILED_SOFTWARE_NAME=$COILED_SOFTWARE_NAME_HEAD-${{ github.event.number }}-$COILED_SOFTWARE_NAME_TAIL
          else
            export COILED_SOFTWARE_NAME=$COILED_SOFTWARE_NAME_HEAD-$GITHUB_REF_TYPE-$REF_NAME_FORMATTED-$COILED_SOFTWARE_NAME_TAIL
          fi

          # Create conda environment.yaml file for the latest software environment
          python ci/create_latest_runtime_meta.py
          export ENV_FILE="latest-py${{ matrix.python-version }}.yaml"
          cat $ENV_FILE

          mamba install coiled
          echo "Creating Coiled software environment for $COILED_SOFTWARE_NAME"
          coiled env create --name $COILED_SOFTWARE_NAME-py$PYTHON_VERSION_FORMATTED --conda $ENV_FILE

          # Put COILED_SOFTWARE_NAME into an output variable so it can be used in subsequent workflow jobs
          echo "::set-output name=coiled_software::$COILED_SOFTWARE_NAME"

      - name: Upload environment file
        uses: actions/upload-artifact@v3
        with:
          name: conda-environment-file-py${{ matrix.python-version }}
          path: latest-py${{ matrix.python-version }}.yaml

  runtime:
    name: Runtime - ${{ matrix.os }}, Python ${{ matrix.python-version }}, Runtime ${{ matrix.runtime-version }}
    needs: software
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        # os: ["ubuntu-latest"]
        # python-version: ["3.7", "3.8", "3.9"]
        # runtime-version: ["latest", "0.0.3"]
        # include:
        #   - python-version: "3.9"
        #     runtime-version: "latest"
        #     os: "windows-latest"
        #   - python-version: "3.9"
        #     runtime-version: "latest"
        #     os: "macos-latest"
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
        runtime-version: ["latest", "0.0.3"]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python-version }}
          environment-file: ci/environment.yml

      - name: Download environment file
        if: matrix.runtime-version == 'latest'
        uses: actions/download-artifact@v3
        with:
          name: conda-environment-file-py${{ matrix.python-version }}

      - name: Install coiled-runtime
        env:
          COILED_RUNTIME_VERSION: ${{ matrix.runtime-version }}
          ENV_FILE: latest-py${{ matrix.python-version }}.yaml
        run: bash ci/scripts/install_coiled_runtime.sh

      - name: Export environment
        run: bash ci/scripts/export_conda_env.sh

      - name: Run Coiled Runtime Tests
        id: test
        env:
          DASK_COILED__TOKEN: ${{ secrets.COILED_BENCHMARK_BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.RUNTIME_CI_BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RUNTIME_CI_BOT_AWS_SECRET_ACCESS_KEY }}
          COILED_RUNTIME_VERSION: ${{ matrix.runtime-version }}
          COILED_SOFTWARE_NAME: ${{ needs.software.outputs.coiled_software }}
          TEST_UPSTREAM: ${{ needs.software.outputs.test_upstream }}
        run: bash ci/scripts/run_tests.sh tests/runtime

  benchmarks:
    name: Benchmarks - ${{ matrix.os }}, Python ${{ matrix.python-version }}, Runtime ${{ matrix.runtime-version }}
    needs: software
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
        runtime-version: ["latest", "0.0.3"]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python-version }}
          environment-file: ci/environment.yml

      - name: Download environment file
        if: matrix.runtime-version == 'latest'
        uses: actions/download-artifact@v3
        with:
          name: conda-environment-file-py${{ matrix.python-version }}

      - name: Install coiled-runtime
        env:
          COILED_RUNTIME_VERSION: ${{ matrix.runtime-version }}
          ENV_FILE: latest-py${{ matrix.python-version }}.yaml
        run: bash ci/scripts/install_coiled_runtime.sh

      - name: Export environment
        run: bash ci/scripts/export_conda_env.sh

      - name: Run benchmarking tests
        id: benchmarking_tests
        env:
          DASK_COILED__TOKEN: ${{ secrets.COILED_BENCHMARK_BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.RUNTIME_CI_BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RUNTIME_CI_BOT_AWS_SECRET_ACCESS_KEY }}
          COILED_RUNTIME_VERSION: ${{ matrix.runtime-version }}
          COILED_SOFTWARE_NAME: ${{ needs.software.outputs.coiled_software }}
        run: bash ci/scripts/run_tests.sh tests/benchmarks

  stability:
    name: Stability - ${{ matrix.os }}, Python ${{ matrix.python-version }}, Runtime ${{ matrix.runtime-version }}
    needs: software
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.7", "3.8", "3.9"]
        runtime-version: ["latest", "0.0.3"]
        include:
          - python-version: "3.9"
            runtime-version: "latest"
            os: "windows-latest"
          - python-version: "3.9"
            runtime-version: "latest"
            os: "macos-latest"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python-version }}
          environment-file: ci/environment.yml

      - name: Download environment file
        if: matrix.runtime-version == 'latest'
        uses: actions/download-artifact@v3
        with:
          name: conda-environment-file-py${{ matrix.python-version }}

      - name: Install coiled-runtime
        env:
          COILED_RUNTIME_VERSION: ${{ matrix.runtime-version }}
          ENV_FILE: latest-py${{ matrix.python-version }}.yaml
        run: bash ci/scripts/install_coiled_runtime.sh

      - name: Export environment
        run: bash ci/scripts/export_conda_env.sh

      - name: Run stability tests
        id: stability_tests
        env:
          DASK_COILED__TOKEN: ${{ secrets.COILED_BENCHMARK_BOT_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.RUNTIME_CI_BOT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RUNTIME_CI_BOT_AWS_SECRET_ACCESS_KEY }}
          COILED_RUNTIME_VERSION: ${{ matrix.runtime-version }}
          COILED_SOFTWARE_NAME: ${{ needs.software.outputs.coiled_software }}
        run: bash ci/scripts/run_tests.sh tests/stability

  cleanup:
    needs: [software, runtime, benchmarks, stability]
    if: always()
    name: Cleanup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install coiled
        run: python -m pip install coiled

      - name: Remove Coiled software environment
        env:
          DASK_COILED__TOKEN: ${{ secrets.COILED_BENCHMARK_BOT_TOKEN }}
          COILED_SOFTWARE_NAME: ${{ needs.software.outputs.coiled_software }}
        run: |
          # Construct latest software environment name
          export PYTHON_VERSION_FORMATTED=$(python -c "import sys; print(f'{sys.version_info[0]}{sys.version_info[1]}')")
          export COILED_SOFTWARE_NAME=$COILED_SOFTWARE_NAME-py$PYTHON_VERSION_FORMATTED

          coiled env delete $COILED_SOFTWARE_NAME

  report:
    name: report
    needs: [runtime, benchmarks, stability]
    if: |
      always()
      && github.event_name != 'pull_request'
      && github.repository == 'coiled/coiled-runtime'
      && (needs.runtime.result == 'failure' ||
          needs.benchmarking.result == 'failure' ||
          needs.stability.result == 'failure')
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Report failures
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = "⚠️ CI failed ⚠️"
            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
            const issue_body = `[Workflow Run URL](${workflow_url})`
            // Run GraphQL query against GitHub API to find the most recent open issue used for reporting failures
            const query = `query($owner:String!, $name:String!, $creator:String!){
              repository(owner: $owner, name: $name) {
                issues(first: 1, states: OPEN, filterBy: {createdBy: $creator}, orderBy: {field: CREATED_AT, direction: DESC}) {
                  edges {
                    node {
                      body
                      id
                      number
                    }
                  }
                }
              }
            }`;
            const variables = {
                owner: context.repo.owner,
                name: context.repo.repo,
                creator: "github-actions[bot]"
            }
            const result = await github.graphql(query, variables)
            // If no issue is open, create a new issue,
            // else update the body of the existing issue.
            if (result.repository.issues.edges.length === 0) {
                github.issues.create({
                    owner: variables.owner,
                    repo: variables.name,
                    body: issue_body,
                    title: title,
                })
            } else {
                github.issues.update({
                    owner: variables.owner,
                    repo: variables.name,
                    issue_number: result.repository.issues.edges[0].node.number,
                    body: issue_body
                })
            }